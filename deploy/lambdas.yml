AWSTemplateFormatVersion: "2010-09-09"
Description: "Portal Resources Lambdas"

Parameters:
  ServiceName:
    Type: String
    Description: The name of the service
  RoleArn:
    Type: String
    Description: Arn of the execution role
  SourceBucket:
    Type: String
    Description: The bucket the code is in
  SourceKey:
    Type: String
    Description: The path to the code zip
  AlephSecurityGroups:
    Type: CommaDelimitedList
    Description: The security group(s) required for aleph
  AlephSubnets:
    Type: CommaDelimitedList
    Description: The subnet(s) required for aleph

Outputs:
  BorrowedArn:
    Description: Borrowed lambda arn
    Value: !GetAtt Borrowed.Arn
  PendingArn:
    Description: Pending lambda arn
    Value: !GetAtt Pending.Arn
  AlephQueryArn:
    Description: AlephQuery lambda arn
    Value: !GetAtt AlephQuery.Arn
  AlephRenewArn:
    Description: AlephRenew lambda arn
    Value: !GetAtt AlephRenew.Arn

Resources:
  Borrowed:
    DependsOn:
      - Aleph
      - Illiad
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ServiceName}-borrowed
      Description: Get borrowed resources for given netid
      Runtime: python2.7
      Handler: joinHandler.borrowed
      Timeout: 30
      Environment:
        Variables:
          ALEPH_FUNC:
            Fn::GetAtt:
              - Aleph
              - Arn
          ILLIAD_FUNC:
            Fn::GetAtt:
              - Illiad
              - Arn
      Role: !Ref RoleArn
      Code:
        S3Bucket: !Ref SourceBucket
        S3Key: !Ref SourceKey
  BorrowedPermission:
    DependsOn: Borrowed
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Borrowed.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  BorrowedLogGroup:
    DependsOn: Borrowed
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ServiceName}-borrowed
      RetentionInDays: 30
  BorrowedErrorFilter:
    DependsOn: BorrowedLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "[date=*-*-*, time, state=*ERROR*,]"
      LogGroupName: !Ref BorrowedLogGroup
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: "Hesburgh"
          MetricName: "Errors"

  Pending:
    Type: AWS::Lambda::Function
    DependsOn:
      - Aleph
      - Illiad
    Properties:
      FunctionName: !Sub ${ServiceName}-pending
      Description: Get pending resources for given netid
      Runtime: python2.7
      Handler: joinHandler.pending
      Timeout: 30
      Environment:
        Variables:
          ALEPH_FUNC:
            Fn::GetAtt:
              - Aleph
              - Arn
          ILLIAD_FUNC:
            Fn::GetAtt:
              - Illiad
              - Arn
      Role: !Ref RoleArn
      Code:
        S3Bucket: !Ref SourceBucket
        S3Key: !Ref SourceKey
  PendingPermission:
    DependsOn: Pending
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Pending.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  PendingLogGroup:
    DependsOn: Pending
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ServiceName}-pending
      RetentionInDays: 30
  PendingErrorFilter:
    DependsOn: PendingLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "[date=*-*-*, time, state=*ERROR*,]"
      LogGroupName: !Ref PendingLogGroup
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: "Hesburgh"
          MetricName: "Errors"

  Aleph:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ServiceName}-aleph
      Description: Get aleph resources for given netid
      Runtime: python2.7
      Handler: serviceHandler.aleph
      MemorySize: 512
      Timeout: 30
      Role: !Ref RoleArn
      Code:
        S3Bucket: !Ref SourceBucket
        S3Key: !Ref SourceKey
      VpcConfig:
        SecurityGroupIds: !Ref AlephSecurityGroups
        SubnetIds: !Ref AlephSubnets
  AlephLogGroup:
    DependsOn: Aleph
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ServiceName}-aleph
      RetentionInDays: 30
  AlephErrorFilter:
    DependsOn: AlephLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "[date=*-*-*, time, state=*ERROR*,]"
      LogGroupName: !Ref AlephLogGroup
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: "Hesburgh"
          MetricName: "Errors"

  AlephQuery:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ServiceName}-alephQuery
      Description: Query aleph for a book
      Runtime: python2.7
      Handler: alephQuery.findItem
      MemorySize: 512
      Timeout: 30
      Role: !Ref RoleArn
      Code:
        S3Bucket: !Ref SourceBucket
        S3Key: !Ref SourceKey
      VpcConfig:
        SecurityGroupIds: !Ref AlephSecurityGroups
        SubnetIds: !Ref AlephSubnets
  AlephQueryPermission:
    DependsOn: AlephQuery
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AlephQuery.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  AlephQueryLogGroup:
    DependsOn: AlephQuery
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ServiceName}-alephQuery
      RetentionInDays: 30
  AlephQueryErrorFilter:
    DependsOn: AlephQueryLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "[date=*-*-*, time, state=*ERROR*,]"
      LogGroupName: !Ref AlephQueryLogGroup
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: "Hesburgh"
          MetricName: "Errors"

  AlephRenew:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ServiceName}-alephRenew
      Description: Renew aleph item
      Runtime: python2.7
      Handler: alephQuery.renewItem
      Timeout: 30
      MemorySize: 512
      Role: !Ref RoleArn
      Code:
        S3Bucket: !Ref SourceBucket
        S3Key: !Ref SourceKey
      VpcConfig:
        SecurityGroupIds: !Ref AlephSecurityGroups
        SubnetIds: !Ref AlephSubnets
  AlephRenewPermission:
    DependsOn: AlephQuery
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AlephRenew.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  AlephRenewLogGroup:
    DependsOn: AlephRenew
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ServiceName}-alephRenew
      RetentionInDays: 30
  AlephRenewErrorFilter:
    DependsOn: AlephRenewLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "[date=*-*-*, time, state=*ERROR*,]"
      LogGroupName: !Ref AlephRenewLogGroup
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: "Hesburgh"
          MetricName: "Errors"

  Illiad:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ServiceName}-illiad
      Description: Get illiad resources for given netid
      Runtime: python2.7
      Handler: serviceHandler.illiad
      Timeout: 30
      Role: !Ref RoleArn
      Code:
        S3Bucket: !Ref SourceBucket
        S3Key: !Ref SourceKey
  IlliadLogGroup:
    DependsOn: Illiad
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ServiceName}-illiad
      RetentionInDays: 30
  IlliadErrorFilter:
    DependsOn: IlliadLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "[date=*-*-*, time, state=*ERROR*,]"
      LogGroupName: !Ref IlliadLogGroup
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: "Hesburgh"
          MetricName: "Errors"

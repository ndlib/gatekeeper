AWSTemplateFormatVersion: "2010-09-09"
Description: "Portal Resources Gateway"

Parameters:
  ServiceName:
    Type: String
    Description: The name of the service
  Stage:
    Type: String
    Description: The deployed stage
  AlephArn:
    Type: String
    Description: Arn for the Aleph Lambda
  IlliadArn:
    Type: String
    Description: Arn for the Illiad Lambda
  AlephQueryArn:
    Type: String
    Description: Arn for the AlephQuery Lambda
  AlephRenewArn:
    Type: String
    Description: Arn for the AlephRenew Lambda
  AlephUpdateArn:
    Type: String
    Description: Arn for the AlephUpdate Lambda
  AuthorizerName:
    Type: String
    Description: The name of the authorizer lambda

Outputs:
  GatewayId:
    Value: !Ref Gateway

Resources:
  GatewayStage:
    Type: AWS::ApiGateway::Deployment
    DependsOn: Gateway
    Properties:
      RestApiId: !Ref Gateway
      StageName: !Ref Stage

  Gateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ServiceName
      Description: Get personalized library resources
      Body:
        swagger: "2.0"
        schemes:
        - "https"
        paths:
          /aleph:
            get:
              parameters:
              - name: "type"
                in: "query"
                required: true
                type: "string"
                description: "The type of information to get (borrowed, pending, user)"
              - name: "library"
                in: "query"
                required: false
                type: "string"
                description: "The library to query for items (ndu50, hcc50, bci50, smc50)"
              responses:
                "200":
                  description: Get personal Aleph info
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
                  schema:
                    $ref: '#/definitions/PendList'
                "401":
                  description: Unauthorized - most often because of invalid token
                "404":
                  description: The netid was not found
                default:
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - jwt: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ''
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !Ref AlephArn
                      - "/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Credentials:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Credentials: "'false'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{statusCode:200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /illiad:
            get:
              parameters:
              - name: "type"
                in: "query"
                required: true
                type: "string"
                description: "The type of information to get (borrowed, pending, user)"
              responses:
                "200":
                  description: Get personal Illiad info
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
                  schema:
                    $ref: '#/definitions/PendList'
                "401":
                  description: Unauthorized - most often because of invalid token
                "404":
                  description: The netid was not found
                default:
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - jwt: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ''
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !Ref IlliadArn
                      - "/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Credentials:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Credentials: "'false'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{statusCode:200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/aleph/{systemId}":
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ''
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !Ref AlephQueryArn
                      - "/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Credentials:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Credentials: "'false'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{statusCode:200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /aleph/renew:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "barcode"
                in: "header"
                required: true
                type: "string"
                description: "The barcode of the item to renew"
              - name: "aleph-id"
                in: "header"
                required: true
                type: "string"
                description: "The alephId of the user doing the renewal"
              responses:
                '200':
                  description: 'Item successfully renewed'
                '500':
                  description: 'Item was not renewed'
              x-amazon-apigateway-request-validator: "params-only"
              x-amazon-apigateway-integration:
                passthroughBehavior: 'when_no_match'
                httpMethod: 'POST'
                type: 'aws_proxy'
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AlephRenewArn}/invocations'
              security:
              - jwt: []
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Credentials:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Credentials: "'false'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,barcode,aleph-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{statusCode:200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /aleph/update:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "library"
                in: "header"
                required: true
                type: "string"
                description: "The library id to set as home library"
              - name: "aleph-id"
                in: "header"
                required: true
                type: "string"
                description: "The alephId of the user to update"
              responses:
                '200':
                  description: 'User successfully updated'
                '500':
                  description: 'Failure'
              x-amazon-apigateway-request-validator: "params-only"
              x-amazon-apigateway-integration:
                passthroughBehavior: 'when_no_match'
                httpMethod: 'POST'
                type: 'aws_proxy'
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AlephUpdateArn}/invocations'
              security:
              - jwt: []
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Credentials:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Credentials: "'false'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,library,aleph-id'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{statusCode:200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
        securityDefinitions:
          jwt:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
              authorizerUri:
                Fn::Join:
                  - ":"
                  - - arn:aws:apigateway
                    - !Ref AWS::Region
                    - lambda:path/2015-03-31/functions/arn:aws:lambda
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Sub function:${AuthorizerName}/invocations
              authorizerResultTtlInSeconds: 300
              type: "token"
        definitions:
          Item:
            type: object
            properties:
              title:
                type: string
          OutList:
            type: object
            properties:
              user:
                type: string
              checkedOut:
                type: array
                items:
                  $ref: '#/definitions/Item'
          PendList:
            type: object
            properties:
              user:
                type: string
              pending:
                type: array
                items:
                  $ref: '#/definitions/Item'
          Error:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string



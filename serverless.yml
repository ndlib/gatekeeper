# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: portalResources # NOTE: update this with your service name

custom:
  serviceStage: ${{self:service}}-${{opt:stage}}

package:
  exclude:
    - "*Env"
    - "*.sh"
    - "test*"

provider:
  name: aws
  runtime: python2.7
  deploymentBucket: ${{opt:infra}}-serverless
  role: defaultRole
  variableSyntax: '\${{([\s\S]+?)}}' # Change the serverless variable syntax to be ${{}}, so that we can use Fn::Sub "${}"
  stackTags:
    Name: "${{opt:infra}}-${{self:custom.serviceStage}}"
    Contact: hbeachey@nd.edu
    Owner: Harrison Beachey
    Description: Service to get book/resource information for a given netid
    InceptDate: "2017-01-19"


  environment:
    ALEPH_FUNC:
      Fn::Join:
        - ":"
        - - "arn:aws:lambda"
          - Ref: "AWS::Region"
          - Ref: "AWS::AccountId"
          - "function"
          - ${{self:functions.aleph.name}}
    ILLIAD_FUNC:
      Fn::Join:
        - ":"
        - - "arn:aws:lambda"
          - Ref: "AWS::Region"
          - Ref: "AWS::AccountId"
          - "function"
          - ${{self:functions.illiad.name}}


functions:
  borrowed:
    name: ${{self:custom.serviceStage}}-borrowed
    description: Get borrowed resources for given netid
    handler: joinHandler.borrowed
    timeout: 15
    events:
      - http:
          path: items/borrowed
          method: get
          authorizer: "not:real:authorizer:jwt"
          cors: true

  pending:
    name: ${{self:custom.serviceStage}}-pending
    description: Get pending resources for given netid
    handler: joinHandler.pending
    timeout: 15
    events:
      - http:
          path: items/pending
          method: get
          authorizer: "not:real:authorizer:jwt"
          cors: true

  aleph:
    name: ${{self:custom.serviceStage}}-aleph
    description: Get aleph resources for given netid
    handler: serviceHandler.aleph
    timeout: 15
    # This currently can't be deployed -- needs to be able to call CreateNetworkInterface
    vpc:
      securityGroupIds:
        - sg-bd3e9cc1
        - sg-2e15b752
      subnetIds:
        - subnet-fee3a4d3
    environment:
      ALEPH_PATH: ${{env:ALEPH_PATH}}

  illiad:
    name: ${{self:custom.serviceStage}}-illiad
    description: Get illiad resources for given netid
    handler: serviceHandler.illiad
    environment:
      ILLIAD_KEY: ${{env:ILLIAD_KEY}}


resources:
  Resources:
    # KMS
    ServiceKey: ${{file(kms.yml):ServiceKey}}
    ServiceKeyAlias: ${{file(kms.yml):ServiceKeyAlias}}

    defaultRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${{self:custom.serviceStage}}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: "InvokeLambdas"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "lambda:InvokeFunction"
                  Resource:
                    - ${{self:provider.environment.ALEPH_FUNC}}
                    - ${{self:provider.environment.ILLIAD_FUNC}}
                - Effect: "Allow"
                  Action:
                    - "kms:Decrypt"
                  Resource: "arn:aws:kms:::alias/${{self:custom.serviceStage}}"

    JwtApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerUri:
          Fn::Join:
            - ":"
            - - "arn:aws:apigateway"
              - Ref: "AWS::Region"
              - "lambda:path/2015-03-31/functions/arn:aws:lambda"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "function:lambda-authorizer-dev/invocations"
    JwtLambdaPermissionApiGateway:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::Sub: "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lambda-authorizer-dev"
